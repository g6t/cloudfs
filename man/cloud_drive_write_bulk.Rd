% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drive_transfer_bulk.R
\name{cloud_drive_write_bulk}
\alias{cloud_drive_write_bulk}
\title{Write objects to Google Drive in bulk}
\usage{
cloud_drive_write_bulk(
  content,
  fun = NULL,
  ...,
  local = FALSE,
  quiet = FALSE,
  project = getwd()
)
}
\arguments{
\item{content}{(data.frame) output of \code{cloud_object_ls()}}

\item{fun}{A function to write a file to cloud location to which x and a file
path will be passed (in that order). By default, if \code{fun = NULL}, it will
be attempted to find an appropriate writing function based on the file
extension.}

\item{...}{Further parameters to pass to \code{fun}}

\item{local}{(logical) If \code{TRUE}, will additionally create a local file at
the corresponding path. Default is \code{FALSE}.}

\item{quiet}{all caution messages may be turned off by setting this parameter
to \code{TRUE}.}

\item{project}{Path to a project. By default it is current working directory.}
}
\description{
Given a named list of objects \link{cloud_object_ls} function returns
a dataframe similar to the output of \link{cloud_local_ls} or \link{cloud_drive_ls}.
\code{cloud_drive_write_bulk} can be applied to such a dataframe to write all
the listed objects to S3. It will be attempted to guess writing function
from file extensions. You can pass writing function manually by setting
\code{fun} parameter, but it means that all the files will be written using one
function. In fact, you probably shouldn't be writing multiple files of
different types in bulk.
}
\examples{
\dontrun{
# write two csv files: data/df_mtcars.csv and data/df_iris.csv
cloud_object_ls(
  dplyr::lst(mtcars = mtcars, iris = iris),
  path = "data",
  extension = "csv",
  prefix = "df_"
) \%>\% 
cloud_drive_write_bulk()
}
  
}
